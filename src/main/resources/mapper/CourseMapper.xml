<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.cssa.wxcloudrun.dao.CourseMapper">

    <insert id="saveComment" parameterType="CourseComment">
        INSERT INTO comment (user_id, courseID, professor, courseTime, difficulty, prefer, comment, commentTime)
        VALUES (#{userID}, #{courseID}, #{professor}, #{courseTime}, #{difficulty}, #{prefer}, #{comment},
                #{commentTime})
    </insert>

    <select id="getAllCourseList" resultType="Course">
        SELECT courseID,
               departmentID,
               courseName,
               departmentAbrev,
               courseNum,
               avgDifficulty,
               avgPrefer,
               credit,
               commentCount
        FROM course
        WHERE commentCount &gt;= #{commentCount}
          AND isGrad = #{isGrad}
        ORDER BY ${field} ${order}, courseID ASC
        LIMIT #{offset}, #{limit}
    </select>

    <select id="getCourseList" resultType="Course">
        SELECT courseID,
               departmentID,
               courseName,
               departmentAbrev,
               courseNum,
               avgDifficulty,
               avgPrefer,
               credit,
               commentCount
        FROM course
        WHERE departmentID = #{departmentID}
          AND isGrad = #{isGrad}
        ORDER BY ${field} ${order}, courseNum ASC
    </select>

    <update id="updateCourse" parameterType="Course">
        UPDATE course
        SET avgDifficulty = #{avgDifficulty},
            avgPrefer     = #{avgPrefer},
            commentCount  = #{commentCount}
        WHERE courseID = #{courseID}
    </update>

    <select id="getCourse" resultType="Course">
        SELECT courseID, departmentID, courseName, departmentAbrev, courseNum, avgDifficulty, avgPrefer, credit,
        commentCount FROM course WHERE courseID in
        <foreach item="course" collection="courseID" separator="," open="(" close=")" index="index">
            #{course}
        </foreach>
    </select>

    <update id="incrementCount" parameterType="Integer">
        UPDATE comment
        SET likeCount = likeCount + 1
        WHERE commentID = #{commentID};
    </update>

    <update id="hideComment" parameterType="Integer">
        UPDATE comment
        SET commentTime = '1000-01-01 00:00:00'
        WHERE commentID = #{commentID}
    </update>

    <select id="getDepartmentList" resultType="Department">
        SELECT departmentID, department, departmentAbrev
        FROM department
        ORDER BY departmentID
    </select>

    <select id="getCommentList" resultType="CourseComment">
        SELECT comment.commentID,
               comment.professor,
               comment.courseTime,
               comment.difficulty,
               comment.prefer,
               comment.comment,
               comment.likeCount,
               comment.commentTime,
               COALESCE(user.avatar, 1) AS userAvatar
        FROM comment
                 LEFT JOIN user ON comment.user_id = user.id
        WHERE courseID = #{courseID}
        ORDER BY ${orderField} DESC
        LIMIT #{offset}, #{limit}
    </select>

    <select id="getPostCommentCount" parameterType="Map" resultType="Integer">
        SELECT COUNT(commentID)
        from comment
        WHERE courseID = #{courseID}
          AND user_id = #{userID}
    </select>

    <select id="searchCourse" parameterType="String" resultType="Course">
        SELECT courseID,
               departmentID,
               courseName,
               departmentAbrev,
               courseNum,
               avgDifficulty,
               avgPrefer,
               credit,
               commentCount,
               REPLACE(departmentAbrev, ' ', '') AS strname
        FROM course
        HAVING strname LIKE #{departmentAbrev}
           AND courseNum LIKE #{courseNum}
        limit 10
    </select>

    <select id="getUserComment" parameterType="Map" resultType="CourseComment">
        SELECT commentID,
               professor,
               courseTime,
               difficulty,
               prefer,
               comment,
               likeCount,
               commentTime,
               courseNum,
               courseName,
               departmentAbrev
        from comment
                 INNER JOIN course
        WHERE comment.courseID = course.courseID
          AND commentID > #{offset}
          AND user_id = #{userID}
        ORDER BY commentID
        LIMIT ${limit}
    </select>

    <update id="updateComment" parameterType="Map">
        UPDATE comment
        SET comment = #{courseComment}
        WHERE user_id = #{userID}
          AND commentID = #{commentID}
    </update>

    <delete id="deleteComment">
        DELETE
        FROM comment
        WHERE user_id = #{userID}
          AND commentID = #{commentID}
    </delete>

</mapper>
