<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.cssa.wxcloudrun.dao.RideMapper">

    <select id="getRide" parameterType="Integer" resultType="org.cssa.wxcloudrun.model.Ride">
        SELECT *
        FROM ride
        WHERE rideId = #{rideId} AND removedTime IS NULL
    </select>

    <select id="getRideList" parameterType="java.util.Map" resultType="org.cssa.wxcloudrun.model.Ride">
        SELECT *
        FROM ride
        WHERE removedTime IS NULL
        LIMIT #{offset}, #{limit}
    </select>

    <select id="isRideOwnedByUser" parameterType="java.util.Map" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM ride
        WHERE userId = #{openId} AND rideId = #{rideId}
    </select>

    <select id="getRemovedRideList" parameterType="java.util.Map" resultType="org.cssa.wxcloudrun.model.Ride">
        SELECT *
        FROM ride
        WHERE userId = #{userId} AND removedTime IS NOT NULL
        LIMIT #{offset}, #{limit}
    </select>

    <insert id="saveRide" parameterType="org.cssa.wxcloudrun.model.Ride" useGeneratedKeys="true" keyProperty="rideId">
        INSERT INTO ride (userId, rideType, price, origin, destination, description, availableSeats, requestedSeats,
                          departure_time, return_time, contactInfoJSON, make, model, estimated_arrival_time, images)
        VALUES (#{userId}, #{rideType}, #{price}, #{origin}, #{destination}, #{description}, #{availableSeats},
                #{requestedSeats}, #{departureTime}, #{returnTime}, #{contactInfo}, #{make}, #{model},
                #{estimatedArrivalTime}, #{images})
    </insert>

    <update id="updateRide" parameterType="java.util.Map">
        UPDATE ride
        SET rideType = #{ride.rideType},
        price = #{ride.price},
        origin = #{ride.origin},
        destination = #{ride.destination},
        description = #{ride.description},
        availableSeats = #{ride.availableSeats},
        requestedSeats = #{ride.requestedSeats},
        departure_time = #{ride.departureTime},
        return_time = #{ride.returnTime},
        contactInfoJSON = #{ride.contactInfo},
        make = #{ride.make},
        model = #{ride.model},
        estimated_arrival_time = #{ride.estimatedArrivalTime},
        images = #{ride.images}
        <if test="ifToPublish">
            , publishedTime = NOW()
        </if>
        <if test="ifToPublish and ride.removedTime != null">
            , removedTime = NULL
        </if>
        WHERE rideId = #{rideId} AND userId = #{openId}
    </update>

    <update id="removeRide" parameterType="Integer">
        UPDATE ride
        SET removedTime = NOW()
        WHERE rideId = #{rideId}
    </update>

    <delete id="deleteRide" parameterType="Integer">
        DELETE FROM ride
        WHERE rideId = #{rideId}
    </delete>

    <select id="isPublished" parameterType="Integer" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM ride
        WHERE rideId = #{rideId} AND publishedTime IS NOT NULL AND removedTime IS NULL
    </select>

</mapper>
